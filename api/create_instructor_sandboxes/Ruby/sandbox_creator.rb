#Working as of 11/18/16
#------------------Edit these variables---------------------#
#Access token generated by an account admin
$auth_token = ''

#If your instance is utah.instructure.com, this is just 'utah'
$school_domain = ''

#The full path to the CSV mapping file
$mapping_file_path = "/path/to/file"

#No need to edit this
$api_base_url = "https://#{$school_domain}.instructure.com/api/v1/"

#create the user (required if there is no SIS ID tied to the user)
$create_user = true

#set to true to assign a SIS ID to the user, otherwise defaults to email address
$user_sis_id = false

#set true to notify users of account creation (only if creating the account)
$notify_create = true

#set true to notify users of course enrollment
$notify_enroll = true
#----------------------------------------------------------#

#----------------------------------------------------------#
#  Don't edit from here unless you know what you are doing #
#----------------------------------------------------------#
#Required gems - INSTALL THESE BEFORE STARTING
require 'rubygems'
require 'json'
require 'typhoeus'
require 'csv'

#------------------Read File Data------------------------#
# - Pulls information from the CSV File
#--------------------------------------------------------#

def read_file_data
  #open mapping file
  CSV.foreach($mapping_file_path, headers: true) do |row|

    #Check that headers are correct
    if row['first_name'].nil? || row['last_name'].nil? || row['email'].nil?
      raise 'Valid CSV headers not found (Expecting first_name,last_name,email)'
    else
      if $user_sis_id
        raise 'Valid CSV headers not found (Expecting first_name,last_name,email,sis_id)' if row['sis_id'].nil?
        initialize_create(row['first_name'],row['last_name'],row['email'],row['sis_id'])
      else
        initialize_create(row['first_name'],row['last_name'],row['email'])
      end
    end
  end
end


#------------------initialize create------------------------#
# - Initializes the sandbox course creation
#-----------------------------------------------------------#
def initialize_create(first_name,last_name,email,sis_id=email)
  #create user if create user is true
  puts "#------------------------------------------------------#\n"

  if $create_user
    create_user(first_name,last_name,email,sis_id)
  end

  #create course
  course_id = create_course(first_name,last_name)

  #enroll user
  enroll_user(sis_id, "#{first_name}_#{last_name}_sandbox")

  puts "#------------------------------------------------------#\n"
end

#---------------------Create User---------------------------#
# - Initializes the sandbox course creation
#-----------------------------------------------------------#
def create_user(first_name,last_name,email,sis_id)

  response = Typhoeus.post(

            "#{$api_base_url}accounts/1/users",
            headers: { :authorization => 'Bearer ' + $auth_token },
            body: {
              user: {
                :name => "#{first_name} #{last_name}"
              },
              pseudonym: {
                :unique_id => email,
                :sis_user_id => sis_id,
                :send_confirmation => $notify_create
              },
              communication_channel: {
                :address => email
              }
            }
        )
    #parse JSON data to save in readable array
    data = JSON.parse(response.body)

    if response.code == 200
      puts " * Created User #{first_name} #{last_name}"
    else
      puts "There was an issue creating user #{first_name} #{last_name} (#{response.code})"
    end

end

#---------------------Create Course---------------------------#
# - Creates the sandbox course shell
#-------------------------------------------------------------#
def create_course(first_name,last_name)

  response = Typhoeus.post(

            "#{$api_base_url}accounts/1/courses",
            headers: { :authorization => 'Bearer ' + $auth_token },
            body: {
              course: {
                :name => first_name + " " + last_name + " Sandbox",
                :sis_course_id => first_name + "_" +last_name + "_sandbox"
              }
            }
        )
  #parse JSON data to save in readable array
  data = JSON.parse(response.body)

  if response.code == 200
    puts " * Created course for #{first_name} #{last_name}"
  else
    puts "There was an issue creating a course for user #{first_name} #{last_name} (#{response.code})"

  end

  first_name + "_" +last_name + "_sandbox"
end

#---------------------Enroll User-----------------------------#
# - Creates the sandbox course shell
#-------------------------------------------------------------#
def enroll_user(user_id,course_id)
  response = Typhoeus.post(

            "#{$api_base_url}courses/sis_course_id:#{course_id}/enrollments",
            headers: { :authorization => 'Bearer ' + $auth_token },
            body: {
              enrollment: {
                :user_id => "sis_user_id:#{user_id}",
                :type => 'TeacherEnrollment',
                :enrollment_state => 'active',
                :notify => $notify_enroll
              }
            }
        )
  #parse JSON data to save in readable array
  data = JSON.parse(response.body)

  if response.code == 200
    puts " * Enrolled user #{user_id} in sandbox course"
  else
    puts "There was an issue enrolling user #{user_id} (#{response.code})"
  end
end


#-------------------------------------------------------------#
# - Start the script
#-------------------------------------------------------------#
#notify users = true? in create and enroll
puts "Initializing...."
read_file_data
puts "done."
